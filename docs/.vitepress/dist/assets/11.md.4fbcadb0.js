import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a9d1f0e8.js";const l="/assets/test_12.529c14da.png",o="/assets/test_13.6fc3e1cc.png",t="/assets/test_14.7d26cfe9.png",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"11.md","filePath":"11.md"}'),e={name:"11.md"},c=p(`<h2 id="附录一-断点测试和中断测试" tabindex="-1">附录一：断点测试和中断测试 <a class="header-anchor" href="#附录一-断点测试和中断测试" aria-label="Permalink to &quot;附录一：断点测试和中断测试&quot;">​</a></h2><p><strong>断点测试</strong></p><p>断点这个概念来源于单步调试，在一次单步调试中，如果设置了一个断点，那么程序在debug的过程中会首先在断点处停下来。什么意思呢，就是说程序会先执行完断点之前的所有代码，在碰到断点所在行时，等待用户执行单步调试。单步调试时，可以跟踪代码中各个变量的值。</p><p>接下来，我们以Dev-C++为例(笔者本机上版本为5.6.3)，给大家详细演示一下一次单步调试的详细步骤。</p><p>首先我们编辑一个test.c文件，源码如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> dividend </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> divisor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> quotient;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">       i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( divisor </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">fprintf</span><span style="color:#E1E4E8;">(stderr, </span><span style="color:#9ECBFF;">&quot;除数为 0 退出运行...</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   quotient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dividend </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> divisor;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">fprintf</span><span style="color:#E1E4E8;">(stderr, </span><span style="color:#9ECBFF;">&quot;quotient 变量的值为 : </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, quotient );</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> dividend </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> divisor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> quotient;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">       i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( divisor </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">fprintf</span><span style="color:#24292E;">(stderr, </span><span style="color:#032F62;">&quot;除数为 0 退出运行...</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   quotient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dividend </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> divisor;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">fprintf</span><span style="color:#24292E;">(stderr, </span><span style="color:#032F62;">&quot;quotient 变量的值为 : </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, quotient );</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，在编辑器中，将鼠标定位到下面这一行：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i);</span></span></code></pre></div><p>按F4键，或者鼠标移到这一行的行号位置(行号是编辑器自动标注出来的)点击鼠标，断点即设置成功。此时，该行会呈现为红色背景，且行首会出现一个红色的勾，如下：</p><p><img src="`+l+'" alt=""></p><p>【图11.1】</p><p>接下来，我们点击下面的&quot;Add watch&quot;按钮弹出如下对话框：</p><p><img src="'+o+'" alt=""></p><p>【图11.2】</p><p>这个对话框，是让我们输入需要监测的变量，在这个代码实例中，我们输入i即可。</p><p>接下来，就可以开始Debug了，单击底部的&quot;Debug&quot;按钮，代码在断点所在行停了下来并且背景色变成了蓝色。同时还弹出了一个命令行的结果窗口。笔者建议您使用一个外接显示器来调试代码，否则在单步调试时，你无法&quot;实时&quot;查看到结果窗中的变化。</p><p>当你给电脑连接上一个外接显示器后，你就可以直接将结果窗拖动到外接显示器上。之后我们点击底部的&quot;Next line&quot;按钮，就开启单步调试代码之旅了。每点击一次按钮，程序就多运行一步(这里的一步对应代码编辑器中的一行)，同时你能清楚地看到代码在循环、分支和顺序结构中的执行次序。并且，在设置了监测变量之后，编辑器左侧的Debug窗口中还会实时显示出变量在每一步代码运行后的值：</p><p><img src="'+t+'" alt=""></p><p>【图11.3】</p><p>在PHP中，同样有类似的断点测试工具，但是需要我们先安装php的xdebug扩展，这个过程稍显复杂。</p><p><strong>var_dump中断测试</strong></p><p>通常php不会被用来书写包含复杂算法的大块代码，更多的是处理业务逻辑。因此大部分情况下，我们不需要安装xdebug扩展来做单步调试。使用var_dump输出函数，就可以有效完成代码的调试。</p><p>当然使用var_dump函数输出变量内容的同时，必须及时让代码停下来，否则我们可能需要等待程序运行很长时间才能看到输出的内容，而这是完全不必要的。一般我们在var_dump之后，紧跟着使用die或者exit函数就可以了。</p><blockquote><p>注意：这里我们不提倡使用print_r函数，因为print_r输出信息时，不会包含变量的类型信息。比如一个整型的1和一个字符串的1，使用print_r输出时，命令行窗口都是显示1，这在很多情况下是不符合我们的调试需求的。</p></blockquote>',24),r=[c];function E(y,i,d,F,u,C){return n(),a("div",null,r)}const g=s(e,[["render",E]]);export{q as __pageData,g as default};
