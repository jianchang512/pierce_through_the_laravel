import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a9d1f0e8.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"14.md","filePath":"14.md"}'),l={name:"14.md"},o=p(`<h2 id="附录四-container之bind方法" tabindex="-1">附录四：Container之bind方法 <a class="header-anchor" href="#附录四-container之bind方法" aria-label="Permalink to &quot;附录四：Container之bind方法&quot;">​</a></h2><p>源文件路径：vendor\\laravel\\framework\\src\\Illuminate\\Container\\Container.php</p><p>方法名：bind</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Register a binding with the container.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">string</span><span style="color:#6A737D;">  $abstract</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#79B8FF;">\\Closure</span><span style="color:#6A737D;">|</span><span style="color:#F97583;">string</span><span style="color:#6A737D;">|</span><span style="color:#F97583;">null</span><span style="color:#6A737D;">  $concrete</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">bool</span><span style="color:#6A737D;">  $shared</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">($abstract, $concrete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, $shared </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">dropStaleInstances</span><span style="color:#E1E4E8;">($abstract);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If no concrete type was given, we will simply set the concrete type to the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// abstract type. After that, the concrete type to be registered as shared</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// without being forced to state their classes in both of the parameters.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">is_null</span><span style="color:#E1E4E8;">($concrete)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        $concrete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $abstract;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If the factory is not a Closure, it means it is just a class name which is</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// bound into this container to the abstract type and we will just wrap it</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// up inside its own Closure to give us more convenience when extending.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> $concrete </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Closure</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        $concrete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getClosure</span><span style="color:#E1E4E8;">($abstract, $concrete);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">bindings[$abstract] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compact</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;concrete&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;shared&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If the abstract type was already resolved in this container we&#39;ll fire the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// rebound listener so that any objects which have already gotten resolved</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// can have their copy of the object updated via the listener callbacks.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolved</span><span style="color:#E1E4E8;">($abstract)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">rebound</span><span style="color:#E1E4E8;">($abstract);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Register a binding with the container.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">string</span><span style="color:#6A737D;">  $abstract</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#005CC5;">\\Closure</span><span style="color:#6A737D;">|</span><span style="color:#D73A49;">string</span><span style="color:#6A737D;">|</span><span style="color:#D73A49;">null</span><span style="color:#6A737D;">  $concrete</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">bool</span><span style="color:#6A737D;">  $shared</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">($abstract, $concrete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, $shared </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">dropStaleInstances</span><span style="color:#24292E;">($abstract);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If no concrete type was given, we will simply set the concrete type to the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// abstract type. After that, the concrete type to be registered as shared</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// without being forced to state their classes in both of the parameters.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">is_null</span><span style="color:#24292E;">($concrete)) {</span></span>
<span class="line"><span style="color:#24292E;">        $concrete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $abstract;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If the factory is not a Closure, it means it is just a class name which is</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// bound into this container to the abstract type and we will just wrap it</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// up inside its own Closure to give us more convenience when extending.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> $concrete </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Closure</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        $concrete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getClosure</span><span style="color:#24292E;">($abstract, $concrete);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">bindings[$abstract] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compact</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;concrete&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;shared&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If the abstract type was already resolved in this container we&#39;ll fire the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// rebound listener so that any objects which have already gotten resolved</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// can have their copy of the object updated via the listener callbacks.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolved</span><span style="color:#24292E;">($abstract)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">rebound</span><span style="color:#24292E;">($abstract);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>bind方法是Laravel实现绑定机制的核心方法之一，另外还有很多其他的方法：</p><ol><li><p>bind把接口和实现类绑定，当make解析接口的时候创建其实现类的实例对象</p></li><li><p>singleton把接口和其实现类绑定，当第一次make解析的时候创建实例，后面都返回该实例不再创建</p></li><li><p>instance把接口和其实现类的实例绑定，直接绑定实例对象</p></li><li><p>上下文绑定</p></li><li><p>自动绑定</p></li><li><p>tag绑定</p></li><li><p>extends扩展绑定</p></li></ol><p>本节我们仅聚焦bind方法的实现。</p><p><strong>参数</strong></p><ol><li><p>首先明确第一个参数$abstract，简单说就是id，可以当作是存入容器中的名字，它可以使一个字符串，一个类甚至是一个接口。</p></li><li><p>第二个参数$concrete简单说就是真实的值，可以当作是一个真正存入容器的实体。他可以是一个实现类，实例或者一个闭包。</p></li><li><p>第三个参数控制shared的值。</p></li></ol><p>方法体： 1、绑定前先清空instances和aliases中存在的同名字的服务:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dropStaleInstances</span><span style="color:#E1E4E8;">($abstract)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">unset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">instances[$abstract], </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">aliases[$abstract]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dropStaleInstances</span><span style="color:#24292E;">($abstract)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">unset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">instances[$abstract], </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">aliases[$abstract]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>2、然后判断第二个参数$concrete是不是空，如果是空，则将abstract变量值直接赋值给$concrete</p><p>3、判断$concrete是否是一个闭包，不是则调用getClosure，返回一个闭包便于后面操作</p><p>我们看一下getClosure方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClosure</span><span style="color:#E1E4E8;">($abstract, $concrete)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($container, $parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []) </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> ($abstract, $concrete) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($abstract </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> $concrete) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $container</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">($concrete);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $container</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			$concrete, $parameters, $raiseEvents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">		);</span></span>
<span class="line"><span style="color:#E1E4E8;">	};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClosure</span><span style="color:#24292E;">($abstract, $concrete)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($container, $parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []) </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> ($abstract, $concrete) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($abstract </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> $concrete) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $container</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">($concrete);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $container</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			$concrete, $parameters, $raiseEvents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">		);</span></span>
<span class="line"><span style="color:#24292E;">	};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>大家可以很清楚地看到，这里再次调用了build和resolve方法，并且将解析出来的对象当作闭包函数的返回值。</p><p>回到bind方法，上面 $concrete 得到一个闭包函数后，调用 compact 把 $concrete 和 $shard （第三个参数判断是否 shared）组成一个 key 分别为 concrete 和 shared 的数组，存入 binding 数组中，而 binding 数组的 key 是当前的抽象类：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">bindings[$abstract] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compact</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;concrete&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;shared&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">bindings[$abstract] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compact</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;concrete&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;shared&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>处理后的结构是这样的：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$binding[$abstract] </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;concrete&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">($container,$parameters</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[]),</span><span style="color:#6A737D;">//getClosure()得到的</span></span>
<span class="line"><span style="color:#E1E4E8;">    &#39;shared&#39; =&gt; true/false,</span><span style="color:#6A737D;">//shared的值是bind的第三个参数</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$binding[$abstract] </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;concrete&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">($container,$parameters</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[]),</span><span style="color:#6A737D;">//getClosure()得到的</span></span>
<span class="line"><span style="color:#24292E;">    &#39;shared&#39; =&gt; true/false,</span><span style="color:#6A737D;">//shared的值是bind的第三个参数</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>最后这里，如果当前的抽象类曾经被解析过。那再次绑定的时候，我们要使用 rebound 函数触发 执行reboundCallbacks 数组中的回调函数：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolved</span><span style="color:#E1E4E8;">($abstract))</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">rebound</span><span style="color:#E1E4E8;">($abstract);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolved</span><span style="color:#24292E;">($abstract))</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">rebound</span><span style="color:#24292E;">($abstract);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如何判断当前的$abstract曾经被解析过，我们看下resolved函数，两个条件：</p><p>1、当前的resolved数组中是否存在$abstract</p><p>2、instances数组中是否存在对应的值，注意：在bind方法的第一句<code>$this-&gt;dropStaleInstances($abstract);</code>，那时我们已经清空了instances对应的abstract值，因此这里$abstract实际是找到的$abstract的别名。对应resolved方法开始的这几条语句。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolved</span><span style="color:#E1E4E8;">($abstract)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isAlias</span><span style="color:#E1E4E8;">($abstract)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        $abstract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getAlias</span><span style="color:#E1E4E8;">($abstract);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">resolved[$abstract]) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">instances[$abstract]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolved</span><span style="color:#24292E;">($abstract)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isAlias</span><span style="color:#24292E;">($abstract)) {</span></span>
<span class="line"><span style="color:#24292E;">        $abstract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getAlias</span><span style="color:#24292E;">($abstract);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">resolved[$abstract]) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#005CC5;">isset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">instances[$abstract]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>本节内容部分参考自LearnKu社区，以下为转载详情： 作者：HarveyNorman 链接：<a href="https://learnku.com/articles/41504" target="_blank" rel="noreferrer">https://learnku.com/articles/41504</a></p></blockquote>`,27),e=[o];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const b=s(l,[["render",t]]);export{F as __pageData,b as default};
