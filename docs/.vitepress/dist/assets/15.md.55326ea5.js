import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a9d1f0e8.js";const l="/assets/test_17.c9d312aa.png",e="/assets/test_18.6847ebf8.png",o="/assets/test_19.48649be7.png",C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"15.md","filePath":"15.md"}'),t={name:"15.md"},c=p(`<h2 id="附录五-container之resolvedependencies方法" tabindex="-1">附录五：Container之resolveDependencies方法 <a class="header-anchor" href="#附录五-container之resolvedependencies方法" aria-label="Permalink to &quot;附录五：Container之resolveDependencies方法&quot;">​</a></h2><p>源文件路径：vendor\\laravel\\framework\\src\\Illuminate\\Container\\Container.php</p><p>方法名：resolveDependencies</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Resolve all of the dependencies from the ReflectionParameters.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">array</span><span style="color:#6A737D;">  $dependencies</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">array</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#79B8FF;">\\Illuminate\\Contracts\\Container\\BindingResolutionException</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveDependencies</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">array</span><span style="color:#E1E4E8;"> $dependencies)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    $results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($dependencies </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $dependency) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// If this dependency has a override for this particular build we will use</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// that instead as the value. Otherwise, we will continue with this run</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// of resolutions and let reflection attempt to determine the result.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">hasParameterOverride</span><span style="color:#E1E4E8;">($dependency)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $results[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getParameterOverride</span><span style="color:#E1E4E8;">($dependency);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// If the class is null, it means the dependency is a string or some other</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// primitive type which we can not resolve since it is not a class and</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// we will just bomb out with an error since we have no-where to go.</span></span>
<span class="line"><span style="color:#E1E4E8;">        $results[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_null</span><span style="color:#E1E4E8;">($dependency</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolvePrimitive</span><span style="color:#E1E4E8;">($dependency)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">($dependency);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $results;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Resolve all of the dependencies from the ReflectionParameters.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">array</span><span style="color:#6A737D;">  $dependencies</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#D73A49;">array</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#005CC5;">\\Illuminate\\Contracts\\Container\\BindingResolutionException</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveDependencies</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">array</span><span style="color:#24292E;"> $dependencies)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    $results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($dependencies </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $dependency) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// If this dependency has a override for this particular build we will use</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// that instead as the value. Otherwise, we will continue with this run</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// of resolutions and let reflection attempt to determine the result.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">hasParameterOverride</span><span style="color:#24292E;">($dependency)) {</span></span>
<span class="line"><span style="color:#24292E;">            $results[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getParameterOverride</span><span style="color:#24292E;">($dependency);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// If the class is null, it means the dependency is a string or some other</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// primitive type which we can not resolve since it is not a class and</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// we will just bomb out with an error since we have no-where to go.</span></span>
<span class="line"><span style="color:#24292E;">        $results[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">is_null</span><span style="color:#24292E;">($dependency</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolvePrimitive</span><span style="color:#24292E;">($dependency)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">($dependency);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $results;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先我们需要清楚的是，$dependencies是通过反射的方式获取到的对象构造函数需要的参数值。由于参数值可能很多，因此这里是传递的数组。但是这个数组大家需要注意的是，每个数组中的元素，并不是简单的字符串类型的值，而是对象类型的值。那这个对象的类型是什么呢？</p><p>首先需要追溯$dependencies是怎么产生的：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$reflector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ReflectionClass</span><span style="color:#E1E4E8;">($concrete);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> $reflector</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isInstantiable</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">notInstantiable</span><span style="color:#E1E4E8;">($concrete);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">buildStack[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $concrete;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $reflector</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">is_null</span><span style="color:#E1E4E8;">($constructor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">array_pop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">buildStack);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> $concrete;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$dependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $constructor</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $instances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolveDependencies</span><span style="color:#E1E4E8;">($dependencies);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BindingResolutionException</span><span style="color:#E1E4E8;"> $e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$reflector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ReflectionClass</span><span style="color:#24292E;">($concrete);</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> $reflector</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isInstantiable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">notInstantiable</span><span style="color:#24292E;">($concrete);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">buildStack[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $concrete;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $reflector</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">is_null</span><span style="color:#24292E;">($constructor)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">array_pop</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">buildStack);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> $concrete;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$dependencies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $constructor</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    $instances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolveDependencies</span><span style="color:#24292E;">($dependencies);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BindingResolutionException</span><span style="color:#24292E;"> $e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span></code></pre></div><p>上面这段代码正是调用<code>resolveDependencies</code>方法前，<code>build</code>方法中的核心代码。可以看到，$dependencies是反射类的构造器通过调用<code>getParameters</code>方法获取到的值，继续追溯getConstructor方法：</p><p>大家可以查看php的在线手册，在这个页面：<a href="https://www.php.net/manual/zh/class.reflectionclass.php%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86ReflectionClass%E8%83%BD%E8%B0%83%E7%94%A8%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%9A" target="_blank" rel="noreferrer">https://www.php.net/manual/zh/class.reflectionclass.php，包含了ReflectionClass能调用的所有方法：</a></p><p><img src="`+l+'" alt=""></p><p>可以看到，<code>getConstructor</code>方法返回的是ReflectionMethod类型的值。</p><p>于是我们继续找到ReflectionMethod的手册页面(<a href="https://www.php.net/manual/zh/class.reflectionmethod.php" target="_blank" rel="noreferrer">https://www.php.net/manual/zh/class.reflectionmethod.php</a>)，找到<code>getParameters</code>方法：</p><p><img src="'+e+'" alt=""></p><p>点进去仔细查看这个页面的说明：</p><p><img src="'+o+`" alt=""></p><p>至此，我们可以确定，$dependencies数组中的元素类型，是ReflectionParameter类。这一点，和后面我们看到的<code>resolvePreimitive</code>方法中给出的形参类型一致。</p><p>弄清楚这一点，我们才能知道，当后面的代码出现<code>$dependency-&gt;name</code>，<code>$dependency-&gt;getClass()</code>，以及<code>$parameter-&gt;isDefaultValueAvailable()</code>和<code>$parameter-&gt;getDefaultValue()</code>、<code>$parameter-&gt;isOptional()</code>、<code>$parameter-&gt;getClass()-&gt;name</code>时，究竟发生了什么。</p><p>接下来我们继续看源码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($dependencies </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $dependency) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If this dependency has a override for this particular build we will use</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// that instead as the value. Otherwise, we will continue with this run</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// of resolutions and let reflection attempt to determine the result.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">hasParameterOverride</span><span style="color:#E1E4E8;">($dependency)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		$results[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getParameterOverride</span><span style="color:#E1E4E8;">($dependency);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If the class is null, it means the dependency is a string or some other</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// primitive type which we can not resolve since it is not a class and</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// we will just bomb out with an error since we have no-where to go.</span></span>
<span class="line"><span style="color:#E1E4E8;">    $results[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_null</span><span style="color:#E1E4E8;">($dependency</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">		    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolvePrimitive</span><span style="color:#E1E4E8;">($dependency)</span></span>
<span class="line"><span style="color:#E1E4E8;">		    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">($dependency);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($dependencies </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $dependency) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If this dependency has a override for this particular build we will use</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// that instead as the value. Otherwise, we will continue with this run</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// of resolutions and let reflection attempt to determine the result.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">hasParameterOverride</span><span style="color:#24292E;">($dependency)) {</span></span>
<span class="line"><span style="color:#24292E;">		$results[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getParameterOverride</span><span style="color:#24292E;">($dependency);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If the class is null, it means the dependency is a string or some other</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// primitive type which we can not resolve since it is not a class and</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// we will just bomb out with an error since we have no-where to go.</span></span>
<span class="line"><span style="color:#24292E;">    $results[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">is_null</span><span style="color:#24292E;">($dependency</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">		    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolvePrimitive</span><span style="color:#24292E;">($dependency)</span></span>
<span class="line"><span style="color:#24292E;">		    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">($dependency);</span></span></code></pre></div><p>这里是直接遍历整个数组，然后使用方法<code>$this-&gt;hasParameterOverride($dependency)</code>判断是否存在参数覆盖，我们看一下<code>hasParameterOverride</code>方法的源码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasParameterOverride</span><span style="color:#E1E4E8;">($dependency)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array_key_exists</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		$dependency</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name, </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getLastParameterOverride</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasParameterOverride</span><span style="color:#24292E;">($dependency)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array_key_exists</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		$dependency</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name, </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getLastParameterOverride</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>getLastParameterOverride</code>是获取make时候存入with数组的参数。如果有覆盖，就将<code>$this-&gt;getParameterOverride($dependency)</code>中的值存入result数组，中断本次循环继续执行下一次循环。我们继续看一下<code>getParameterOverride</code>方法的源码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParameterOverride</span><span style="color:#E1E4E8;">($dependency)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getLastParameterOverride</span><span style="color:#E1E4E8;">()[$dependency</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParameterOverride</span><span style="color:#24292E;">($dependency)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getLastParameterOverride</span><span style="color:#24292E;">()[$dependency</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>还是通过 <code>getLastParameterOverride </code>获取 with 数组，然后在数组中通过 name获取。</p><p>如果<code>hasParameterOverride</code>方法返回值为false，判断这个类是不是存在于当前代码中，如果不存在，则使用<code>resolvePrimitive</code>方法，看看上下文绑定中有没有对应的值，再看看依赖自己有没有默认值。如果存在则使用<code>resolveClass</code>方法，就是使用make函数解析这个依赖。</p><p>resolvePrimitive：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolvePrimitive</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ReflectionParameter</span><span style="color:#E1E4E8;"> $parameter)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_null</span><span style="color:#E1E4E8;">($concrete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getContextualConcrete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;$&#39;</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $concrete </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Closure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> $concrete(</span><span style="color:#79B8FF;">$this</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> $concrete;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isDefaultValueAvailable</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getDefaultValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">unresolvablePrimitive</span><span style="color:#E1E4E8;">($parameter);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolvePrimitive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ReflectionParameter</span><span style="color:#24292E;"> $parameter)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">is_null</span><span style="color:#24292E;">($concrete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getContextualConcrete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;$&#39;</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name))) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $concrete </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Closure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> $concrete(</span><span style="color:#005CC5;">$this</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> $concrete;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isDefaultValueAvailable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getDefaultValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">unresolvablePrimitive</span><span style="color:#24292E;">($parameter);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意这个方法中参数$parameter的类型是：<strong>ReflectionParameter</strong>，我们在本节的前面已经给大家分析过怎样确定$parameter变量的的类型。</p><p>resolveClass：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ReflectionParameter</span><span style="color:#E1E4E8;"> $parameter)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">($parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// If we can not resolve the class instance, we will check to see if the value</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// is optional, and if it is we will return the optional parameter value as</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// the value of the dependency, similarly to how we do this with scalars.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BindingResolutionException</span><span style="color:#E1E4E8;"> $e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isOptional</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getDefaultValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> $e;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ReflectionParameter</span><span style="color:#24292E;"> $parameter)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">($parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// If we can not resolve the class instance, we will check to see if the value</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// is optional, and if it is we will return the optional parameter value as</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// the value of the dependency, similarly to how we do this with scalars.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BindingResolutionException</span><span style="color:#24292E;"> $e) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isOptional</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getDefaultValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> $e;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>resolveDependencies</code>方法源自Container类的<code>build</code>方法，而<code>build</code>又是核心方法<code>resolve</code>中调用的一个子方法。这个方法之所以命名为resolveDependencies，正是因为Laravel框架底层实现&quot;依赖注入&quot;的方式就是使用PHP5之后出现的反射。实际上，使用反射来构建类，必然绕不过循环。因为通过反射提供的相关方法，只能获取到构造函数的参数列表，由于参数列表中的参数数目和参数类型是不确定的，这里只能通过循环去做处理。</p><p>下面是另一个处理&quot;依赖注入&quot;的典型方式：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dependence1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dependence2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myClass</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> $dep1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> $dep2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Dependence1</span><span style="color:#E1E4E8;"> $dependence1, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Dependence2</span><span style="color:#E1E4E8;"> $dependence2</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">dep1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $dependence1;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">dep2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $dependence2;        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ReflectionMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">myClass</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__construct&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">$parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $constructor</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$dependences </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($parameters </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $parameter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $dependenceClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) $parameter</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    $dependences[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> $dependenceClass();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">$dependences);</span></span>
<span class="line"><span style="color:#79B8FF;">var_dump</span><span style="color:#E1E4E8;">($instance);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dependence1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dependence2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo2&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myClass</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> $dep1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> $dep2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Dependence1</span><span style="color:#24292E;"> $dependence1, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Dependence2</span><span style="color:#24292E;"> $dependence2</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">dep1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $dependence1;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">dep2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $dependence2;        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ReflectionMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">myClass</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__construct&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">$parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $constructor</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$dependences </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($parameters </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $parameter) {</span></span>
<span class="line"><span style="color:#24292E;">    $dependenceClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) $parameter</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    $dependences[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> $dependenceClass();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">$dependences);</span></span>
<span class="line"><span style="color:#005CC5;">var_dump</span><span style="color:#24292E;">($instance);</span></span></code></pre></div><p>这段代码的运行结果如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">myClass</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#6 (2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;dep1&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;myClass&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Dependence1</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#4 (0) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;dep2&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;myClass&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Dependence2</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#5 (0) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">myClass</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#6 (2) {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;dep1&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;myClass&quot;</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">private</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Dependence1</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#4 (0) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;dep2&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;myClass&quot;</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">private</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Dependence2</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#5 (0) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,35),r=[c];function y(E,i,d,F,h,u){return n(),a("div",null,r)}const g=s(t,[["render",y]]);export{C as __pageData,g as default};
