import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a9d1f0e8.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"16.md","filePath":"16.md"}'),l={name:"16.md"},o=p(`<h2 id="附录六-application之register方法" tabindex="-1">附录六：Application之register方法 <a class="header-anchor" href="#附录六-application之register方法" aria-label="Permalink to &quot;附录六：Application之register方法&quot;">​</a></h2><p>源文件路径：vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Application.php</p><p>方法名：register</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Register a service provider with the application.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#79B8FF;">\\Illuminate\\Support\\ServiceProvider</span><span style="color:#6A737D;">|</span><span style="color:#F97583;">string</span><span style="color:#6A737D;">  $provider</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">bool</span><span style="color:#6A737D;">   $force</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#79B8FF;">\\Illuminate\\Support\\ServiceProvider</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">($provider, $force </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (($registered </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getProvider</span><span style="color:#E1E4E8;">($provider)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> $force) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $registered;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// If the given &quot;provider&quot; is a string, we will resolve it, passing in the</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// application instance automatically for the developer. This is simply</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// a more convenient way of specifying your service provider classes.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">is_string</span><span style="color:#E1E4E8;">($provider)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		$provider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolveProvider</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	$provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// If there are bindings / singletons set as properties on the provider we</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// will spin through them and register them with the application, which</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// serves as a convenience layer while registering a lot of bindings.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">property_exists</span><span style="color:#E1E4E8;">($provider, </span><span style="color:#9ECBFF;">&#39;bindings&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">bindings </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $key </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">($key, $value);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">property_exists</span><span style="color:#E1E4E8;">($provider, </span><span style="color:#9ECBFF;">&#39;singletons&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">singletons </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $key </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">singleton</span><span style="color:#E1E4E8;">($key, $value);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">markAsRegistered</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// If the application has already booted, we will call this boot method on</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// the provider class so it has an opportunity to do its boot logic and</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// will be ready for any usage by this developer&#39;s application logic.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isBooted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">bootProvider</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $provider;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Register a service provider with the application.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#005CC5;">\\Illuminate\\Support\\ServiceProvider</span><span style="color:#6A737D;">|</span><span style="color:#D73A49;">string</span><span style="color:#6A737D;">  $provider</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">bool</span><span style="color:#6A737D;">   $force</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#005CC5;">\\Illuminate\\Support\\ServiceProvider</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">($provider, $force </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (($registered </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getProvider</span><span style="color:#24292E;">($provider)) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> $force) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $registered;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// If the given &quot;provider&quot; is a string, we will resolve it, passing in the</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// application instance automatically for the developer. This is simply</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// a more convenient way of specifying your service provider classes.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">is_string</span><span style="color:#24292E;">($provider)) {</span></span>
<span class="line"><span style="color:#24292E;">		$provider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolveProvider</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	$provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// If there are bindings / singletons set as properties on the provider we</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// will spin through them and register them with the application, which</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// serves as a convenience layer while registering a lot of bindings.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">property_exists</span><span style="color:#24292E;">($provider, </span><span style="color:#032F62;">&#39;bindings&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">bindings </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $key </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $value) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">($key, $value);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">property_exists</span><span style="color:#24292E;">($provider, </span><span style="color:#032F62;">&#39;singletons&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">singletons </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $key </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $value) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">singleton</span><span style="color:#24292E;">($key, $value);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">markAsRegistered</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// If the application has already booted, we will call this boot method on</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// the provider class so it has an opportunity to do its boot logic and</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// will be ready for any usage by this developer&#39;s application logic.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isBooted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">bootProvider</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $provider;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第一步：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (($registered </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getProvider</span><span style="color:#E1E4E8;">($provider)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> $force) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $registered;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (($registered </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getProvider</span><span style="color:#24292E;">($provider)) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> $force) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $registered;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里主要就是调用<code>getProvider($provider)</code>，作用就是检查前面是否已经加载了我们需要的provider，如果是，则直接返回这个provider，不用再加载。如果不是，返回null。</p><p>getProvider：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProvider</span><span style="color:#E1E4E8;">($provider)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array_values</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getProviders</span><span style="color:#E1E4E8;">($provider))[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProvider</span><span style="color:#24292E;">($provider)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array_values</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getProviders</span><span style="color:#24292E;">($provider))[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>array_values函数：返回数组的value值不包含key</p></blockquote><p>getProviders：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProviders</span><span style="color:#E1E4E8;">($provider)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	$name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_string</span><span style="color:#E1E4E8;">($provider) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> $provider </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">get_class</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Arr</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">serviceProviders, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($value) </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> ($name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $value </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> $name;</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProviders</span><span style="color:#24292E;">($provider)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	$name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">is_string</span><span style="color:#24292E;">($provider) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> $provider </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">get_class</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Arr</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">serviceProviders, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($value) </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> ($name) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $value </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> $name;</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里分两步：</p><ul><li><p>a) 如果参数$provider是字符串，直接赋值给变量$name，如果不是，使用get_class获取该参数$provider所属类的路径，返回</p></li><li><p>b) 调用工具类Arr的where方法</p></li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">($array, </span><span style="color:#F97583;">callable</span><span style="color:#E1E4E8;"> $callback)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array_filter</span><span style="color:#E1E4E8;">($array, $callback, </span><span style="color:#79B8FF;">ARRAY_FILTER_USE_BOTH</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">($array, </span><span style="color:#D73A49;">callable</span><span style="color:#24292E;"> $callback)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array_filter</span><span style="color:#24292E;">($array, $callback, </span><span style="color:#005CC5;">ARRAY_FILTER_USE_BOTH</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里简单解释就是去$this-&gt;serviceProviders中找匹配$name值的项，以数组形式返回。</p><p>继续看后面的代码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">is_string</span><span style="color:#E1E4E8;">($provider)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	$provider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">resolveProvider</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">is_string</span><span style="color:#24292E;">($provider)) {</span></span>
<span class="line"><span style="color:#24292E;">	$provider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">resolveProvider</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果$provider是字符串，则执行if中的代码，我们继续看resolveProvider方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveProvider</span><span style="color:#E1E4E8;">($provider)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> $provider(</span><span style="color:#79B8FF;">$this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveProvider</span><span style="color:#24292E;">($provider)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> $provider(</span><span style="color:#005CC5;">$this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很简单，直接new一个provider对象并返回。</p><p>这里我们需要注意new对象同时，传入了$this变量值作为参数。我们猜测，这个$this一定会在类的构造函数中使用到，于是我们去找一个具体的provider类型的类，比如RoutingServiceProvider，看看情况是不是这样。</p><p>然而通过查看RoutingServiceProvider类的源码，我们并没有找到这个类的构造行数__contruct()，既然这样我们只能&quot;向上&quot;继续查找，注意到RoutingServiceProvider类继承了父类ServiceProvider，我们直接跳转到ServiceProvider，终于在这个类中看到了它的构造函数：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">($app)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $app;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">($app)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $app;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样就能解释通了，在执行register方法实例化所有&quot;ServiceProvider类型类&quot;的时候，把当前所有对象共享的容器也&quot;&quot;挂载&quot;进去。因为容器需要知道哪些ServiceProvider类是已经加载过的，哪些是没有加载的。而容器是联结所有对象的纽带，因此操作共享容器app，就是最好的方式。</p><blockquote><p>ServiceProvider类型类：是指所有继承了ServiceProvider基类的类，实际上在Laravel框架中要编写一个新的Provider类，默认都需要继承ServiceProvider基类，因为只有这样Laravel框架在执行过程中才能正确解析出这个Provider类。</p></blockquote><p>接下来这一句，是非常关键的一句：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">();</span></span></code></pre></div><p>执行ServiceProvider类型类上的<code>register</code>方法，仍以RouteServiceProvider为例：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerRouter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerUrlGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerRedirector</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerPsrRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerPsrResponse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerResponseFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">registerControllerDispatcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerRouter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerUrlGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerRedirector</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerPsrRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerPsrResponse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerResponseFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">registerControllerDispatcher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到，这里就是RouteServiceProvider类的核心逻辑了。</p><p>由于本节我们重点关注的是Application类中的register方法，这里我们不再对RouteServiceProvider这个类中的register方法中的所有子方法展开讲解。</p><p>继续往下看后面的代码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">property_exists</span><span style="color:#E1E4E8;">($provider, </span><span style="color:#9ECBFF;">&#39;bindings&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">bindings </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $key </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">($key, $value);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">property_exists</span><span style="color:#E1E4E8;">($provider, </span><span style="color:#9ECBFF;">&#39;singletons&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">foreach</span><span style="color:#E1E4E8;"> ($provider</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">singletons </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> $key </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">singleton</span><span style="color:#E1E4E8;">($key, $value);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">property_exists</span><span style="color:#24292E;">($provider, </span><span style="color:#032F62;">&#39;bindings&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">bindings </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $key </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $value) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">($key, $value);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">property_exists</span><span style="color:#24292E;">($provider, </span><span style="color:#032F62;">&#39;singletons&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">foreach</span><span style="color:#24292E;"> ($provider</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">singletons </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> $key </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $value) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">singleton</span><span style="color:#24292E;">($key, $value);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，我们能分析出来，代码是在检测上一步实例化出来的类(赋值给$provider)中是否包含bindings和singletons成员，如果有包含，就将bindings和singletons成员中的包含的内容解析出来，调用Application类的bind和singleton方法。</p><p>然而Application类本身并没有bind和singleton方法，那这两个方法在哪呢？</p><p>Application类继承了Container类，所以这两个方法实际就是容器类中的方法。在【附录四】中，我们已经给大家讲解过，bind和singleton正是容器执行绑定的两个常用方式。</p><p>继续看后面的代码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">markAsRegistered</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isBooted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">bootProvider</span><span style="color:#E1E4E8;">($provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $provider;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">markAsRegistered</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isBooted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">bootProvider</span><span style="color:#24292E;">($provider);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $provider;</span></span></code></pre></div><p><code>markAsRegistered</code>方法，是把这个已经注册完成的provider对象进行保存(存入serviceProvider数组中)。后面再有需求的时候不需要再次进行注册，这里正好和前面我们讲的第一步相&quot;呼应&quot;。除了这个动作之外，还把对应的类名存储到loadedProviders数组中，以备后用。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">markAsRegistered</span><span style="color:#E1E4E8;">($provider)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">serviceProviders[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $provider;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">loadedProviders[</span><span style="color:#79B8FF;">get_class</span><span style="color:#E1E4E8;">($provider)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">markAsRegistered</span><span style="color:#24292E;">($provider)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">serviceProviders[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $provider;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">loadedProviders[</span><span style="color:#005CC5;">get_class</span><span style="color:#24292E;">($provider)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>之后，判断当前application这个容器对象是都已经启动过了，简单说，就是application的boot方法是否已经执行过了。如果执行过了(即容器已经启动)，则继续调用<code>bootProvider</code>方法。</p><p>这里要怎么理解呢？</p><p>我们可以这么分析：既然程序执行<code>register</code>方法时，已经走到了这里，那就是说当前这个provider是肯定没有注册过的。那么首次注册这个provider，就需要去触发这个provider对象上的boot方法执行。</p><p>bootProvider：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootProvider</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ServiceProvider</span><span style="color:#E1E4E8;"> $provider)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">method_exists</span><span style="color:#E1E4E8;">($provider, </span><span style="color:#9ECBFF;">&#39;boot&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([$provider, </span><span style="color:#9ECBFF;">&#39;boot&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootProvider</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ServiceProvider</span><span style="color:#24292E;"> $provider)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">method_exists</span><span style="color:#24292E;">($provider, </span><span style="color:#032F62;">&#39;boot&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([$provider, </span><span style="color:#032F62;">&#39;boot&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个强制执行provider对象身上boot方法的规则，大家可以理解为它就是Laravel处理ServiceProvider类的方式。实际上框架提供的文档中，也会对此有明确的说明。</p><p>除了在容器主动执行<code>register</code>方法时会触发执行$provider身上定义的boot方法外，在应用启动阶段也会遍历容器定义的所有serviceProviders，然后触发执行这些类身上的bootProvider方法，关于这一点，大家可以在Application类中的boot方法中，找到相同功能的代码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">array_walk</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">serviceProviders, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($p) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">bootProvider</span><span style="color:#E1E4E8;">($p);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">array_walk</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">serviceProviders, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($p) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">bootProvider</span><span style="color:#24292E;">($p);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后一句很好理解，直接返回$provider对象。</p>`,50),e=[o];function t(r,c,i,y,E,d){return n(),a("div",null,e)}const g=s(l,[["render",t]]);export{F as __pageData,g as default};
